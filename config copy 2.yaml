# ============================================================================
# LiteLLM Proxy Configuration File
# Настроено согласно официальной документации для максимального логирования
# и интеграции с Prometheus + Grafana
# ============================================================================

# ============================================================================
# МОДЕЛИ И ПРОВАЙДЕРЫ
# ============================================================================
# model_list:
  # Модели загружаются из базы данных
  # Используйте UI Dashboard для управления моделями

  # Пример реальной OpenAI модели (раскомментировать при наличии ключа)
  # - model_name: gpt-4
  #   litellm_params:
  #     model: openai/gpt-4
  #     api_key: ${OPENAI_API_KEY}  # Из переменной окружения
  #   model_info:
  #     tags: ["production", "high-cost"]
  #     max_tokens: 4096

  # Пример Anthropic модели (раскомментировать при наличии ключа)
  # - model_name: claude-3
  #   litellm_params:
  #     model: anthropic/claude-3-sonnet-20240229
  #     api_key: ${ANTHROPIC_API_KEY}  # Из переменной окружения
  #   model_info:
  #     tags: ["production", "reasoning"]

# ============================================================================
# ОСНОВНЫЕ НАСТРОЙКИ СИСТЕМЫ
# ============================================================================
general_settings:
  # ⭐ АУТЕНТИФИКАЦИЯ - Главный ключ для доступа к API
  master_key: sk-max0027093

  # ⭐ БАЗА ДАННЫХ - Подключение к PostgreSQL
  # КРИТИЧНО: Правильный URL для подключения к БД
  database_url: "postgresql://llmproxy:dbpassword9090@db:5432/litellm"

  # ============================================================================
  # ⭐ ЛОГИРОВАНИЕ В БАЗУ ДАННЫХ (КРИТИЧЕСКИ ВАЖНО)
  # ============================================================================

  # ВКЛЮЧИТЬ все типы логирования в БД
  store_model_in_db: true              # Сохранять информацию о моделях
  enable_spend_logs: true              # ОСНОВНЫЕ логи трат и запросов
  disable_spend_logs: false            # ⭐ НЕ отключать SpendLogs
  disable_error_logs: false            # ⭐ ВКЛЮЧИТЬ ErrorLogs (по умолчанию отключено!)

  # Детальное логирование запросов
  store_prompts_in_spend_logs: true    # Сохранять промпты в логах
  log_raw_request_response: false      # Сырые запросы (только для отладки)
  store_user_in_spend_logs: true       # Информация о пользователях

  # ============================================================================
  # ⭐ НАСТРОЙКИ RETENTION (Управление размером БД)
  # ============================================================================

  # Хранить логи 30 дней (по умолчанию)
  maximum_spend_logs_retention_period: "730d"

  # Запускать cleanup каждый день
  maximum_spend_logs_retention_interval: "1d"

  # ============================================================================
  # ТРЕКИНГ ПОЛЬЗОВАТЕЛЕЙ И КОМАНД
  # ============================================================================

  # Определение пользователя из заголовка (для OpenWebUI)
  user_header_name: X-OpenWebUI-User-Email

  # Включить трекинг пользователей
  enable_user_tracking: true
  track_user_costs: true               # Отслеживать траты по пользователям
  track_cost_per_request: true         # Стоимость каждого запроса
  track_tokens_per_user: true          # Токены по пользователям

  # ============================================================================
  # ЛИМИТЫ И БЮДЖЕТЫ
  # ============================================================================

  # Дневной бюджет на пользователя (USD)
  max_budget_user: 100.0

  # Лимит запросов в час на пользователя
  max_user_requests_per_hour: 1000

  # ============================================================================
  # ПРОИЗВОДИТЕЛЬНОСТЬ И НАДЕЖНОСТЬ
  # ============================================================================

  # Продолжать работу при недоступности БД (для production)
  allow_requests_on_db_unavailable: true

  # Пул соединений с БД
  database_connection_pool_limit: 100
  database_connection_timeout: 60

  # Детальная отладка (ОТКЛЮЧИТЬ в production)
  detailed_debug: false

# ============================================================================
# ⭐ НАСТРОЙКИ LITELLM (CALLBACKS И ЛОГИРОВАНИЕ)
# ============================================================================
litellm_settings:
  # ============================================================================
  # ⭐ PROMETHEUS ИНТЕГРАЦИЯ (КРИТИЧЕСКИ ВАЖНО)
  # ============================================================================

  # Включить встроенные Prometheus метрики (Enterprise функция)
  callbacks: ["prometheus"]             # ⭐ ОСНОВНОЙ callback для всех запросов

  # Специфичные callbacks для разных типов событий
  success_callback: ["prometheus"]      # Успешные запросы → Prometheus
  failure_callback: ["prometheus"]      # ⭐ ОШИБКИ → Prometheus (заполнит ErrorLogs)

  # Системные метрики (здоровье сервисов)
  service_callbacks: ["prometheus"]     # Метрики здоровья LiteLLM

  # ============================================================================
  # НАСТРОЙКИ ЛОГИРОВАНИЯ
  # ============================================================================

  # Формат логов
  json_logs: true                       # JSON формат для лучшего парсинга
  set_verbose: false                    # ⭐ ВЫКЛЮЧИТЬ verbose в production

  # Управление содержимым логов
  turn_off_message_logging: false       # НЕ отключать логирование сообщений
  redact_user_api_key_info: true       # Скрыть API ключи в логах (безопасность)

  # Сырые запросы/ответы (только для отладки)
  log_raw_request_response: false       # ВЫКЛЮЧИТЬ в production (размер логов)

  # ============================================================================
  # КЕШИРОВАНИЕ ДЛЯ ПРОИЗВОДИТЕЛЬНОСТИ
  # ============================================================================

  cache: true                          # Включить кеширование
  cache_params:
    type: redis                        # Использовать Redis
    host: redis                        # Хост Redis (имя сервиса в docker-compose)
    port: 6379                         # Порт Redis
    # Кешировать определенные типы вызовов
    supported_call_types: ["completion", "embedding"]

# ============================================================================
# ⭐ НАСТРОЙКИ РОУТИНГА (для множественных моделей)
# ============================================================================
router_settings:
  # Отключить проверки перед вызовами (временно для отладки)
  enable_pre_call_checks: false

  # Фильтрация по тегам моделей
  enable_tag_filtering: true

  # Стратегия выбора модели (для load balancing)
  routing_strategy: "lowest-latency"    # Выбирать модель с наименьшей задержкой

  # Включить fallback на другие модели при ошибках
  enable_fallbacks: true

# ============================================================================
# ⭐ ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ CALLBACKS
# ============================================================================

# Если нужны дополнительные интеграции (раскомментировать при необходимости)
# litellm_settings:
#   # Интеграция с другими сервисами мониторинга
#   callbacks: ["prometheus", "langfuse", "sentry"]
#   success_callback: ["prometheus", "langfuse"]
#   failure_callback: ["prometheus", "sentry"]    # Ошибки в Sentry
#
#   # OpenTelemetry трейсинг
#   # callbacks: ["prometheus", "otel"]
#
#   # DataDog интеграция
#   # callbacks: ["prometheus", "datadog"]

# ============================================================================
# ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ (для конфиденциальных данных)
# ============================================================================
environment_variables:
  # ⭐ PROMETHEUS НАСТРОЙКИ
  PROMETHEUS_PORT: "4000"              # Порт для /metrics endpoint

  # OpenTelemetry (если используется)
  OTEL_EXPORTER: "prometheus"

  # Уровень логирования
  LITELLM_LOG_LEVEL: "INFO"            # INFO для production, DEBUG для отладки

  # Дополнительные переменные (добавить при необходимости):
  # OPENAI_API_KEY: "your-openai-key"
  # ANTHROPIC_API_KEY: "your-anthropic-key"
  # PROMETHEUS_URL: "http://localhost:9090"
  # DATADOG_API_KEY: "your-datadog-key"

# ============================================================================
# ДОПОЛНИТЕЛЬНЫЕ ОПЦИИ (при необходимости)
# ============================================================================

# Если нужны специальные настройки Prometheus метрик
# prometheus_settings:
#   # Интервал обновления бюджетных метрик (минуты)
#   prometheus_budget_metrics_refresh_interval_minutes: 5
#
#   # Время отправки fallback статистик (часы)
#   prometheus_fallback_stats_send_time_hours: 9

# ============================================================================
# КОММЕНТАРИИ К ЗАПУСКУ
# ============================================================================

# Для запуска с этой конфигурацией:
# 1. Установить зависимости: pip install prometheus_client==0.20.0
# 2. Запуск: litellm --config /home/yan/litellm/config.yaml --port 4000
# 3. Проверка метрик: curl http://localhost:4000/metrics
# 4. Проверка здоровья: curl http://localhost:4000/health
#
# ВАЖНО:
# - Встроенные метрики будут доступны на http://localhost:4000/metrics
# - ErrorLogs начнет заполняться ошибками
# - Все логи сохраняются в PostgreSQL БД
# - Retention policy автоматически удаляет старые логи
