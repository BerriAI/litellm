apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "litellm.fullname" . }}
  labels:
    {{- include "litellm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "litellm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-litellm.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "litellm.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "litellm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: db-ready
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "docker.io/bitnami/postgresql:16.1.0-debian-11-r20"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if .Values.db.deployStandalone }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-secret
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-secret
                  key: password
            - name: DATABASE_HOST
              value: {{ .Release.Name }}-postgresql
            - name: DATABASE_NAME
              value: litellm
            {{- else if .Values.db.useExisting }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.usernameKey }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.passwordKey }}
            - name: DATABASE_HOST
              value: {{ .Values.db.endpoint }}
            - name: STORE_MODEL_IN_DB
              value: "true"
            - name: DATABASE_NAME
              value: {{ .Values.db.database }}
            {{- end }}
          command:
            - sh
            - -c
            - |
              # Maximum wait time will be (limit * 2) seconds.
              limit=60
              current=0
              ret=1
              while [ $current -lt $limit ] && [ $ret -ne 0 ]; do
                echo "Waiting for database to be ready $current"
                psql -U $(DATABASE_USERNAME) -h $(DATABASE_HOST) -l
                ret=$?
                current=$(( $current + 1 ))
                sleep 2
              done
              if [ $ret -eq 0 ]; then
                echo "Database is ready"
              else
                echo "Database failed to become ready before we gave up waiting."
              fi
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{ if .Values.securityContext.readOnlyRootFilesystem }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          {{ end }}
