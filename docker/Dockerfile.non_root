# Base images
ARG LITELLM_BUILD_IMAGE=cgr.dev/chainguard/python:latest-dev
ARG LITELLM_RUNTIME_IMAGE=cgr.dev/chainguard/python:latest-dev

# -----------------
# Builder Stage
# -----------------
FROM $LITELLM_BUILD_IMAGE AS builder
WORKDIR /app

# Install build dependencies
USER root
RUN apk add --no-cache build-base bash \
    && pip install --no-cache-dir --upgrade pip build

# Copy project files
COPY . .

# Build Admin UI
RUN chmod +x docker/build_admin_ui.sh && ./docker/build_admin_ui.sh

# Build litellm-proxy-extras package first (includes new migrations)
RUN cd litellm-proxy-extras && \
    rm -rf dist/* && \
    python -m build && \
    cd ..

# Build main package and wheel dependencies
RUN rm -rf dist/* && python -m build && \
    pip install dist/*.whl && \
    pip wheel --no-cache-dir --wheel-dir=/wheels/ litellm-proxy-extras/dist/*.whl && \
    pip wheel --no-cache-dir --wheel-dir=/wheels/ -r requirements.txt

# --- Pre-cache Prisma binaries in builder stage ---
# Install prisma and configure cache directories
ENV PRISMA_BINARY_CACHE_DIR=/app/.cache/prisma-python/binaries
ENV PRISMA_NODEENV_CACHE_DIR=/app/.cache/prisma-python/nodeenv
ENV PRISMA_CLI_BINARY_TARGETS="debian-openssl-3.0.x"

# Install prisma==0.11.0 (matching requirements.txt) and nodejs-bin
RUN pip install --no-cache-dir prisma==0.11.0 nodejs-bin==18.4.0a4 && \
    mkdir -p /app/.cache/prisma-python/binaries && \
    mkdir -p /app/.cache/prisma-python/nodeenv && \
    mkdir -p /app/.cache/npm

# Setup nodeenv first to ensure nodejs is available for Prisma
RUN python -c "import nodejs; print(nodejs.__file__)" && \
    # Ensure the nodejs binary is accessible
    python -c "from nodejs import node; import subprocess; subprocess.run([node.path, '--version'], check=True)"

# Download ALL Prisma binaries in builder stage
# Generate client first to download query engine
RUN prisma generate || true

# Download CLI and migration engine by running commands that trigger downloads
RUN prisma --version || true && \
    prisma migrate diff --from-empty --to-schema-datamodel ./schema.prisma --script > /dev/null 2>&1 || true && \
    prisma format --schema=./schema.prisma || true

# Force download migration engine explicitly if not already downloaded
RUN prisma migrate deploy --dry-run 2>/dev/null || true

# -----------------
# Runtime Stage
# -----------------
FROM $LITELLM_RUNTIME_IMAGE AS runtime
WORKDIR /app

# Install runtime dependencies
USER root
RUN apk upgrade --no-cache && \
    apk add --no-cache bash libstdc++ ca-certificates openssl

# Copy only necessary artifacts from builder stage for runtime
COPY --from=builder /app/docker/entrypoint.sh /app/docker/prod_entrypoint.sh /app/docker/
COPY --from=builder /app/schema.prisma /app/schema.prisma
COPY --from=builder /app/dist/*.whl .
COPY --from=builder /wheels/ /wheels/
# Copy pre-cached Prisma binaries and CLI from builder stage
COPY --from=builder /app/.cache /app/.cache
# Copy litellm-proxy-extras directory if it has migrations
COPY --from=builder /app/litellm-proxy-extras /app/litellm-proxy-extras
# Copy nodejs and prisma installations from builder (needed by Prisma CLI)
# Copy both the packages and their .dist-info directories for proper Python package registration
COPY --from=builder /usr/lib/python3.13/site-packages/nodejs* /usr/lib/python3.13/site-packages/
COPY --from=builder /usr/lib/python3.13/site-packages/prisma* /usr/lib/python3.13/site-packages/
COPY --from=builder /usr/lib/python3.13/site-packages/tomlkit* /usr/lib/python3.13/site-packages/
COPY --from=builder /usr/lib/python3.13/site-packages/nodeenv* /usr/lib/python3.13/site-packages/
# Copy the prisma executable
COPY --from=builder /usr/bin/prisma /usr/bin/prisma

# Install package from wheel and dependencies
RUN pip install *.whl /wheels/* --no-index --find-links=/wheels/ \
    && rm -f *.whl \
    && rm -rf /wheels

# Install semantic_router without dependencies
RUN pip install semantic_router --no-deps

# Ensure correct JWT library is used (pyjwt not jwt)
RUN pip uninstall jwt -y && \
    pip uninstall PyJWT -y && \
    pip install PyJWT==2.9.0 --no-cache-dir

# --- Prisma Handling for Non-Root User ---
# Prisma binaries are already cached from builder stage in /app/.cache
# No downloads needed at runtime - everything is pre-cached

# Set cache directories to use pre-cached binaries from builder stage
ENV PRISMA_BINARY_CACHE_DIR=/app/.cache/prisma-python/binaries
ENV PRISMA_NODEENV_CACHE_DIR=/app/.cache/prisma-python/nodeenv
ENV PRISMA_CLI_BINARY_TARGETS="debian-openssl-3.0.x"

# Make entrypoints executable
# Prisma and nodejs-bin are already copied from builder stage
RUN chmod +x docker/entrypoint.sh && \
    chmod +x docker/prod_entrypoint.sh && \
    chmod +x /usr/bin/prisma

# Create temporary directories needed at runtime
RUN mkdir -p /tmp/.npm /nonexistent /.npm

# Test that Prisma works with pre-cached binaries (no downloads)
# This will fail if binaries aren't properly cached
RUN prisma --version && \
    prisma generate && \
    prisma migrate diff --from-empty --to-schema-datamodel ./schema.prisma --script > /dev/null 2>&1 || true

# Set permissions for non-root user
RUN chown -R nobody:nogroup /app && \
    chown -R nobody:nogroup /nonexistent && \
    chown -R nobody:nogroup /tmp/.npm && \
    PRISMA_PATH=$(python -c "import os, prisma; print(os.path.dirname(prisma.__file__))") && \
    chown -R nobody:nogroup $PRISMA_PATH

# --- OpenShift Compatibility: Apply Red Hat recommended pattern ---
# Get paths for directories that need write access at runtime
RUN PRISMA_PATH=$(python -c "import os, prisma; print(os.path.dirname(prisma.__file__))") && \
    LITELLM_PROXY_EXTRAS_PATH=$(python -c "import os, litellm_proxy_extras; print(os.path.dirname(litellm_proxy_extras.__file__))" 2>/dev/null || echo "") && \
    # Set group ownership to 0 (root group) for OpenShift compatibility && \
    chgrp -R 0 $PRISMA_PATH && \
    chgrp -R 0 /app/.cache && \
    [ -n "$LITELLM_PROXY_EXTRAS_PATH" ] && chgrp -R 0 $LITELLM_PROXY_EXTRAS_PATH || true && \
    # Mirror owner permissions to group (g=u) as recommended by Red Hat && \
    chmod -R g=u $PRISMA_PATH && \
    chmod -R g=u /app/.cache && \
    [ -n "$LITELLM_PROXY_EXTRAS_PATH" ] && chmod -R g=u $LITELLM_PROXY_EXTRAS_PATH || true && \
    # Ensure directories are readable by group (binaries are read-only at runtime) && \
    chmod -R g+rX $PRISMA_PATH && \
    chmod -R g+rX /app/.cache && \
    [ -n "$LITELLM_PROXY_EXTRAS_PATH" ] && chmod -R g+w $LITELLM_PROXY_EXTRAS_PATH || true

# Switch to non-root user
USER nobody

# Set HOME for non-root user
ENV HOME=/app

# Prisma configuration for runtime - CRITICAL for offline operation
# Cache directories were already set above and persist
# Tell Prisma CLI to skip all downloads and use cached binaries
ENV PRISMA_SKIP_POSTINSTALL_GENERATE=1
ENV PRISMA_HIDE_UPDATE_MESSAGE=1
# Force Prisma to use cached binaries and never download
ENV PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
# Disable automatic binary downloads
ENV PRISMA_DISABLE_WARNINGS=1
# Ensure npm doesn't try to access network
ENV NPM_CONFIG_OFFLINE=true
ENV NPM_CONFIG_PREFER_OFFLINE=true
# Set npm cache to a local directory to prevent network access
ENV NPM_CONFIG_CACHE=/app/.cache/npm
# --- End of Prisma Handling ---

EXPOSE 4000/tcp

# Set entrypoint and command
ENTRYPOINT ["/app/docker/prod_entrypoint.sh"]

# Append "--detailed_debug" to the end of CMD to view detailed debug logs
# CMD ["--port", "4000", "--detailed_debug"]
CMD ["--port", "4000"]