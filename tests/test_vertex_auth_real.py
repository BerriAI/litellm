"""
Real integration test for Vertex AI async authentication.
Tests with actual service account credentials.

Usage:
    export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json
    python tests/test_vertex_auth_real.py
"""

import asyncio
import json
import os
import sys
import time
from pathlib import Path
from unittest.mock import PropertyMock, patch

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from litellm.llms.vertex_ai.vertex_llm_base import VertexBase


async def test_async_credentials_real():
    """Test async credential creation and refresh with real service account"""
    
    print("\n" + "="*80)
    print("REAL ASYNC CREDENTIALS TEST")
    print("="*80 + "\n")
    
    # Get service account path
    creds_path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
    if not creds_path:
        print("‚ùå Error: GOOGLE_APPLICATION_CREDENTIALS environment variable not set")
        print("   Set it to your service account JSON file path:")
        print("   export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json")
        return False
    
    if not os.path.exists(creds_path):
        print(f"‚ùå Error: Credentials file not found: {creds_path}")
        return False
    
    print(f"üìÑ Using credentials from: {creds_path}")
    
    # Load credentials
    with open(creds_path) as f:
        creds_json = json.load(f)
    
    project_id = creds_json.get("project_id")
    print(f"üîë Project ID: {project_id}")
    
    # Create VertexBase instance
    vertex_base = VertexBase()
    
    print("\n" + "-"*80)
    print("TEST 1: Load Async Credentials")
    print("-"*80)
    
    try:
        # Load credentials using async method
        start = time.time()
        creds, resolved_project = await vertex_base.load_auth_async(
            credentials=creds_json,
            project_id=project_id
        )
        elapsed = (time.time() - start) * 1000
        
        print(f"‚úÖ Async credentials loaded in {elapsed:.2f}ms")
        print(f"   Type: {type(creds).__name__}")
        print(f"   Module: {type(creds).__module__}")
        print(f"   Project: {resolved_project}")
        
        # Check if it's async credentials
        import inspect
        is_async = inspect.iscoroutinefunction(creds.refresh)
        print(f"   Async refresh: {is_async}")
        
        if is_async:
            print("   ‚úÖ TRUE ASYNC CREDENTIALS!")
        else:
            print("   ‚ö†Ô∏è  Sync credentials (fallback)")
        
    except Exception as e:
        print(f"‚ùå Failed to load credentials: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\n" + "-"*80)
    print("TEST 2: Async Token Refresh")
    print("-"*80)
    
    try:
        # Test refresh multiple times
        refresh_times = []
        
        for i in range(3):
            start = time.time()
            await vertex_base.refresh_auth_async(creds)
            elapsed = (time.time() - start) * 1000
            refresh_times.append(elapsed)
            
            print(f"   Refresh {i+1}: {elapsed:.2f}ms - Token: {creds.token[:20]}...")
        
        avg_time = sum(refresh_times) / len(refresh_times)
        print(f"\n‚úÖ Average refresh time: {avg_time:.2f}ms")
        
    except Exception as e:
        print(f"‚ùå Failed to refresh: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\n" + "-"*80)
    print("TEST 2B: Force Token Expiration & Auto-Refresh")
    print("-"*80)
    
    try:
        # Save original token
        original_token = creds.token
        print(f"   Original token: {original_token[:30]}...")
        
        # Try to force expiration by directly setting expiry (if writable)
        import datetime
        try:
            creds.expiry = datetime.datetime.utcnow() - datetime.timedelta(seconds=1)  # type: ignore
            forced_expiry = True
            print(f"   ‚úÖ Successfully set expiry to past time")
            print(f"   Credentials expired: {creds.expired if hasattr(creds, 'expired') else 'N/A'}")
        except (AttributeError, TypeError) as e:
            forced_expiry = False
            print(f"   ‚ö†Ô∏è  Cannot set expiry directly: {e}")
            print(f"   Using mock instead...")
        
        if forced_expiry:
            # Real expiration - test refresh
            start = time.time()
            await vertex_base.refresh_auth_async(creds)
            elapsed = (time.time() - start) * 1000
            
            new_token = creds.token
            print(f"   New token: {new_token[:30]}...")
            print(f"   Refresh took: {elapsed:.2f}ms")
            
            # Verify we got a new token
            if hasattr(creds, 'expired'):
                if not creds.expired:
                    print(f"   ‚úÖ Token refreshed successfully!")
                else:
                    print(f"   ‚ö†Ô∏è  Token still expired!")
        else:
            # Fall back to mocking
            with patch.object(type(creds), 'expired', new_callable=PropertyMock, return_value=True):
                print(f"   Credentials expired (mocked): True")
                
                start = time.time()
                await vertex_base.refresh_auth_async(creds)
                elapsed = (time.time() - start) * 1000
                
                new_token = creds.token
                print(f"   New token: {new_token[:30]}...")
                print(f"   Refresh took: {elapsed:.2f}ms")
        
        # Test using get_access_token_async which should auto-refresh if expired
        print(f"\n   Testing auto-refresh via get_access_token_async...")
        
        if forced_expiry:
            # Force expiration again using real expiry
            creds.expiry = datetime.datetime.utcnow() - datetime.timedelta(seconds=1)  # type: ignore
            start = time.time()
            token, project = await vertex_base.get_access_token_async(
                credentials=creds_json,
                project_id=project_id
            )
            elapsed = (time.time() - start) * 1000
            print(f"   ‚úÖ Auto-refresh worked! Got token in {elapsed:.2f}ms")
            print(f"   Token: {token[:30]}...")
        else:
            # Use mock
            with patch.object(type(creds), 'expired', new_callable=PropertyMock, return_value=True):
                start = time.time()
                token, project = await vertex_base.get_access_token_async(
                    credentials=creds_json,
                    project_id=project_id
                )
                elapsed = (time.time() - start) * 1000
                print(f"   ‚úÖ Auto-refresh worked! Got token in {elapsed:.2f}ms")
                print(f"   Token: {token[:30]}...")
        
    except Exception as e:
        print(f"‚ùå Token expiration test failed: {e}")
        import traceback
        traceback.print_exc()
        # Don't return False - this is optional test
        print("   ‚ö†Ô∏è  Continuing with other tests...")
    
    print("\n" + "-"*80)
    print("TEST 3: Persistent Session Verification")
    print("-"*80)
    
    try:
        # Get the session
        session = await VertexBase._get_or_create_token_refresh_session()
        print(f"‚úÖ Session created: {type(session).__name__}")
        print(f"   Session ID: {id(session)}")
        print(f"   Auto decompress: {session._auto_decompress}")
        print(f"   Closed: {session.closed}")
        
        # Verify it's reused
        session2 = await VertexBase._get_or_create_token_refresh_session()
        if id(session) == id(session2):
            print(f"   ‚úÖ Session reused correctly!")
        else:
            print(f"   ‚ö†Ô∏è  Different session IDs: {id(session)} vs {id(session2)}")
        
    except Exception as e:
        print(f"‚ùå Session check failed: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "-"*80)
    print("TEST 4: Cache Behavior with Expired Tokens")
    print("-"*80)
    
    try:
        # Clear cache to start fresh
        vertex_base._credentials_project_mapping.clear()
        print("   Cache cleared")
        
        # First call - should load and cache credentials
        start = time.time()
        token1, proj1 = await vertex_base.get_access_token_async(
            credentials=creds_json,
            project_id=project_id
        )
        elapsed1 = (time.time() - start) * 1000
        print(f"   First call (cache miss): {elapsed1:.2f}ms")
        print(f"   Token: {token1[:30]}...")
        
        # Second call - should use cache (very fast)
        start = time.time()
        token2, proj2 = await vertex_base.get_access_token_async(
            credentials=creds_json,
            project_id=project_id
        )
        elapsed2 = (time.time() - start) * 1000
        print(f"   Second call (cache hit): {elapsed2:.2f}ms")
        print(f"   Token: {token2[:30]}...")
        
        if elapsed2 < elapsed1 / 10:  # Cache should be much faster
            print(f"   ‚úÖ Cache working! {elapsed1/elapsed2:.1f}x faster")
        
        # Now expire the cached credentials
        cache_key = (json.dumps(creds_json), project_id)
        if cache_key in vertex_base._credentials_project_mapping:
            cached_creds, _ = vertex_base._credentials_project_mapping[cache_key]
            print(f"\n   Forcing cached credentials to expire...")
            
            # Try to set expiry directly
            import datetime
            try:
                cached_creds.expiry = datetime.datetime.utcnow() - datetime.timedelta(seconds=1)  # type: ignore
                use_real_expiry = True
                print(f"   ‚úÖ Set expiry on cached credentials")
            except (AttributeError, TypeError):
                use_real_expiry = False
                print(f"   ‚ö†Ô∏è  Using mock for expiry")
            
            # Third call - should detect expiration and refresh
            if use_real_expiry:
                start = time.time()
                token3, proj3 = await vertex_base.get_access_token_async(
                    credentials=creds_json,
                    project_id=project_id
                )
                elapsed3 = (time.time() - start) * 1000
                print(f"   Third call (expired, auto-refresh): {elapsed3:.2f}ms")
                print(f"   Token: {token3[:30]}...")
                
                if elapsed3 > elapsed2:
                    print(f"   ‚úÖ Auto-refresh detected and handled!")
                else:
                    print(f"   ‚ö†Ô∏è  Refresh may not have been needed")
            else:
                with patch.object(type(cached_creds), 'expired', new_callable=PropertyMock, return_value=True):
                    start = time.time()
                    token3, proj3 = await vertex_base.get_access_token_async(
                        credentials=creds_json,
                        project_id=project_id
                    )
                    elapsed3 = (time.time() - start) * 1000
                    print(f"   Third call (expired, auto-refresh): {elapsed3:.2f}ms")
                    print(f"   Token: {token3[:30]}...")
                    
                    if elapsed3 > elapsed2:
                        print(f"   ‚úÖ Auto-refresh detected and handled!")
                    else:
                        print(f"   ‚ö†Ô∏è  Refresh may not have been needed")
        
    except Exception as e:
        print(f"‚ùå Cache behavior test failed: {e}")
        import traceback
        traceback.print_exc()
        # Don't return False - this is optional test
        print("   ‚ö†Ô∏è  Continuing with other tests...")
    
    print("\n" + "-"*80)
    print("TEST 5: Concurrent Async Refreshes")
    print("-"*80)
    
    try:
        start = time.time()
        
        # Run 10 concurrent refreshes
        await asyncio.gather(*[
            vertex_base.refresh_auth_async(creds)
            for _ in range(10)
        ])
        
        elapsed = (time.time() - start) * 1000
        avg_per_refresh = elapsed / 10
        
        print(f"‚úÖ 10 concurrent refreshes completed in {elapsed:.2f}ms")
        print(f"   Average per refresh: {avg_per_refresh:.2f}ms")
        
    except Exception as e:
        print(f"‚ùå Concurrent refresh failed: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "-"*80)
    print("TEST 6: Get Access Token (Full Flow)")
    print("-"*80)
    
    try:
        start = time.time()
        token, project = await vertex_base.get_access_token_async(
            credentials=creds_json,
            project_id=project_id
        )
        elapsed = (time.time() - start) * 1000
        
        print(f"‚úÖ Access token retrieved in {elapsed:.2f}ms")
        print(f"   Token: {token[:30]}...")
        print(f"   Project: {project}")
        
    except Exception as e:
        print(f"‚ùå Failed to get access token: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Cleanup
    print("\n" + "-"*80)
    print("CLEANUP")
    print("-"*80)
    
    await VertexBase.close_token_refresh_session()
    print("‚úÖ Session closed")
    
    print("\n" + "="*80)
    print("ALL TESTS PASSED! ‚úÖ")
    print("="*80 + "\n")
    
    print("Summary:")
    print("  ‚úÖ Async credentials created successfully")
    print("  ‚úÖ Async refresh working with google.auth.aio.transport")
    print("  ‚úÖ Persistent session reused correctly")
    print("  ‚úÖ Concurrent refreshes handled efficiently")
    print("  ‚úÖ Full authentication flow working")
    
    return True


async def compare_sync_vs_async():
    """Compare sync vs async performance"""
    
    print("\n" + "="*80)
    print("SYNC VS ASYNC PERFORMANCE COMPARISON")
    print("="*80 + "\n")
    
    creds_path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
    if not creds_path or not os.path.exists(creds_path):
        print("‚ö†Ô∏è  Skipping comparison - credentials not available")
        return
    
    with open(creds_path) as f:
        creds_json = json.load(f)
    
    project_id = creds_json.get("project_id")
    
    vertex_base = VertexBase()
    
    # Test SYNC
    print("Testing SYNC...")
    sync_times = []
    creds_sync, _ = vertex_base.load_auth(creds_json, project_id)
    
    for i in range(5):
        start = time.time()
        vertex_base.refresh_auth(creds_sync)
        elapsed = (time.time() - start) * 1000
        sync_times.append(elapsed)
    
    avg_sync = sum(sync_times) / len(sync_times)
    print(f"  SYNC avg: {avg_sync:.2f}ms")
    
    # Test ASYNC
    print("\nTesting ASYNC...")
    async_times = []
    creds_async, _ = await vertex_base.load_auth_async(creds_json, project_id)
    
    for i in range(5):
        start = time.time()
        await vertex_base.refresh_auth_async(creds_async)
        elapsed = (time.time() - start) * 1000
        async_times.append(elapsed)
    
    avg_async = sum(async_times) / len(async_times)
    print(f"  ASYNC avg: {avg_async:.2f}ms")
    
    # Calculate improvement
    if avg_sync > avg_async:
        improvement = ((avg_sync - avg_async) / avg_sync) * 100
        speedup = avg_sync / avg_async
        print(f"\n‚úÖ ASYNC is {improvement:.1f}% faster ({speedup:.2f}x speedup)")
    else:
        print(f"\n‚ö†Ô∏è  SYNC was faster (unusual)")
    
    await VertexBase.close_token_refresh_session()


if __name__ == "__main__":
    print("\nüöÄ Starting Real Async Credentials Test\n")
    
    try:
        # Run main test
        success = asyncio.run(test_async_credentials_real())
        
        if success:
            # Run comparison
            asyncio.run(compare_sync_vs_async())
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

