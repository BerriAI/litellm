<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="57" time="9.567" timestamp="2025-09-28T16:09:14.765372" hostname="graham-MS-7C60"><testcase classname="tests.smoke.test_agent_api_shape" name="test_agent_proxy_response_shapes_minimal" time="2.639" /><testcase classname="tests.smoke.test_codex_agent_binary_resolution" name="test_codex_agent_binary_resolution" time="0.001" /><testcase classname="tests.smoke.test_codex_agent_router_smoke" name="test_codex_agent_router_against_inprocess_shim" time="0.442" /><testcase classname="tests.smoke.test_concurrent_agents_isolated_state" name="test_concurrent_agents_isolated_state" time="0.001" /><testcase classname="tests.smoke.test_escalation_matrix_smoke" name="test_escalation_matrix_smoke" time="0.000" /><testcase classname="tests.smoke.test_mini_agent_france_smoke" name="test_agent_api_contract_minimal" time="0.023" /><testcase classname="tests.smoke.test_mini_agent_import" name="test_mini_agent_module_import_and_config" time="0.000" /><testcase classname="tests.smoke_optional.test_agent_escalate_smoke" name="test_agent_escalate_on_last_step" time="0.001" /><testcase classname="tests.smoke_optional.test_agent_json_mode_response_passthrough" name="test_agent_json_mode_response_passthrough" time="0.000" /><testcase classname="tests.smoke_optional.test_agent_proxy" name="test_agent_proxy_run_minimal" time="0.005" /><testcase classname="tests.smoke_optional.test_agent_proxy_headers_and_errors" name="test_agent_proxy_errors_and_headers" time="0.003" /><testcase classname="tests.smoke_optional.test_agent_proxy_metrics_smoke" name="test_agent_proxy_returns_metrics" time="0.002" /><testcase classname="tests.smoke_optional.test_agent_proxy_validation_errors" name="test_agent_proxy_headers_precedence" time="0.008" /><testcase classname="tests.smoke_optional.test_batch_as_completed_ordering" name="test_batch_as_completed_ordering" time="0.051" /><testcase classname="tests.smoke_optional.test_batch_as_completed_return_exceptions" name="test_as_completed_return_exceptions" time="0.001" /><testcase classname="tests.smoke_optional.test_http_error_tail" name="test_http_tools_invoker_error_tail" time="0.001" /><testcase classname="tests.smoke_optional.test_http_tools_invoker" name="test_http_tools_invoker_monkeypatch" time="0.001" /><testcase classname="tests.smoke_optional.test_http_tools_invoker_429_retry_after_once" name="test_http_tools_invoker_429_retry_after_once" time="0.001" /><testcase classname="tests.smoke_optional.test_http_tools_invoker_headers" name="test_http_tools_invoker_headers_passthrough" time="0.001" /><testcase classname="tests.smoke_optional.test_http_tools_invoker_non_json_body" name="test_http_tools_invoker_non_json_body" time="0.001" /><testcase classname="tests.smoke_optional.test_images_local_remote" name="test_compress_image_local" time="0.014" /><testcase classname="tests.smoke_optional.test_images_local_remote" name="test_fetch_remote_image_cache" time="0.001" /><testcase classname="tests.smoke_optional.test_import_fastuuid_fallback" name="test_import_without_fastuuid" time="1.800" /><testcase classname="tests.smoke_optional.test_local_docs_litellm_call_image_prep" name="test_litellm_call_image_prep_uses_utils" time="0.007" /><testcase classname="tests.smoke_optional.test_local_docs_litellm_image_utils" name="test_local_docs_litellm_image_utils_reexport" time="0.000" /><testcase classname="tests.smoke_optional.test_mini_agent" name="test_mini_agent_echo_tool_roundtrip" time="0.003" /><testcase classname="tests.smoke_optional.test_mini_agent_codeblock_autorun_smoke" name="test_mini_agent_autorun_python_codeblock_smoke" time="0.001" /><testcase classname="tests.smoke_optional.test_mini_agent_codeblock_multilang_smoke" name="test_mini_agent_autorun_c_codeblock_smoke" time="0.001" /><testcase classname="tests.smoke_optional.test_mini_agent_repair_loop" name="test_mini_agent_repair_loop_exec_python" time="0.023" /><testcase classname="tests.smoke_optional.test_mini_agent_research_on_unsure" name="test_mini_agent_research_on_unsure" time="0.001" /><testcase classname="tests.smoke_optional.test_mini_agent_response_shapes" name="test_mini_agent_accepts_dict_and_object" time="0.000" /><testcase classname="tests.smoke_optional.test_mini_agent_tool_args_non_json" name="test_mini_agent_tool_args_non_json" time="0.001" /><testcase classname="tests.smoke_optional.test_openai_shim_smoke" name="test_openai_shim_basic" time="0.007" /><testcase classname="tests.smoke_optional.test_parallel_acompletions" name="test_parallel_acompletions_preserve_order_true" time="0.010" /><testcase classname="tests.smoke_optional.test_parallel_acompletions" name="test_parallel_acompletions_preserve_order_false" time="0.001" /><testcase classname="tests.smoke_optional.test_parallel_acompletions_exceptions_and_limits" name="test_parallel_acompletions_exceptions_and_limits" time="0.001" /><testcase classname="tests.smoke_optional.test_parallel_acompletions_exceptions_and_limits" name="test_parallel_acompletions_empty_list" time="0.001" /><testcase classname="tests.smoke_optional.test_parallel_order_and_failfast" name="test_parallel_preserve_order" time="0.053" /><testcase classname="tests.smoke_optional.test_parallel_order_and_failfast" name="test_parallel_fail_fast_cancel" time="0.102" /><testcase classname="tests.smoke_optional.test_prune_history_budget_smaller_than_pair" name="test_prune_history_budget_smaller_than_pair" time="0.001" /><testcase classname="tests.smoke_optional.test_prune_history_preserve_pair" name="test_prune_history_preserve_pair" time="0.000" /><testcase classname="tests.smoke_optional.test_prune_history_small_window" name="test_prune_history_small_window_preserves_last_pair" time="0.001" /><testcase classname="tests.smoke_optional.test_research_python_tools" name="test_research_python_tools_basic" time="0.001" /><testcase classname="tests.smoke_optional.test_router_builder_smoke" name="test_router_builder_param_propagation" time="0.003" /><testcase classname="tests.smoke_optional.test_router_cancel_inflight_no_leak" name="test_router_cancel_inflight_no_leak" time="0.001" /><testcase classname="tests.smoke_optional.test_router_fallback_non_streaming_parity" name="test_router_fallback_non_streaming_parity" time="0.369"><failure message="assert (0 &gt;= 1)">tests/smoke_optional/test_router_fallback_non_streaming_parity.py:30: in test_router_fallback_non_streaming_parity
    assert calls["primary"]&gt;=1 and calls["fb"]==1
E   assert (0 &gt;= 1)</failure></testcase><testcase classname="tests.smoke_optional.test_router_parallel_api_smoke" name="test_parallel_as_completed_and_acompletions" time="0.041" /><testcase classname="tests.smoke_optional.test_router_streaming_fallback_parity" name="test_router_streaming_midstream_fallback_parity" time="0.263" /><testcase classname="tests.smoke_optional.test_router_streaming_metrics_extracted" name="test_router_streaming_metrics_extracted" time="0.018" /><testcase classname="tests.smoke_optional.test_router_streaming_parity" name="test_router_streaming_parity" time="0.192"><failure message="litellm.exceptions.AuthenticationError: litellm.AuthenticationError: AuthenticationError: OpenAIException - Incorrect API key provided: sk-test. You can find your API key at https://platform.openai.com/account/api-keys.. Received Model Group=a&#10;Available Model Group Fallbacks=None">litellm/llms/openai/openai.py:980: in async_streaming
    headers, response = await self.make_openai_chat_completion_request(
litellm/litellm_core_utils/logging_utils.py:190: in async_wrapper
    result = await func(*args, **kwargs)
litellm/llms/openai/openai.py:447: in make_openai_chat_completion_request
    raise e
litellm/llms/openai/openai.py:429: in make_openai_chat_completion_request
    await openai_aclient.chat.completions.with_raw_response.create(
.venv/lib/python3.12/site-packages/openai/_legacy_response.py:381: in wrapped
    return cast(LegacyAPIResponse[R], await func(*args, **kwargs))
.venv/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py:2585: in create
    return await self._post(
.venv/lib/python3.12/site-packages/openai/_base_client.py:1794: in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
.venv/lib/python3.12/site-packages/openai/_base_client.py:1594: in request
    raise self._make_status_error_from_response(err.response) from None
E   openai.AuthenticationError: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-test. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}

During handling of the above exception, another exception occurred:
litellm/main.py:557: in acompletion
    response = await init_response
litellm/llms/openai/openai.py:1030: in async_streaming
    raise OpenAIError(
E   litellm.llms.openai.common_utils.OpenAIError: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-test. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}

During handling of the above exception, another exception occurred:
tests/smoke_optional/test_router_streaming_parity.py:69: in test_router_streaming_parity
    legacy = run("legacy")
tests/smoke_optional/test_router_streaming_parity.py:48: in run
    stream = asyncio.get_event_loop().run_until_complete(
/usr/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
litellm/router.py:212: in _wrapped
    return await target(*args, **kwargs)
litellm/router.py:1336: in acompletion
    raise e
litellm/router.py:1312: in acompletion
    response = await self.async_function_with_fallbacks(**kwargs)
litellm/router.py:4174: in async_function_with_fallbacks
    return await self.async_function_with_fallbacks_common_utils(
litellm/router.py:4132: in async_function_with_fallbacks_common_utils
    raise original_exception
litellm/router.py:4166: in async_function_with_fallbacks
    response = await self.async_function_with_retries(*args, **kwargs)
litellm/router.py:4288: in async_function_with_retries
    self.should_retry_this_error(
litellm/router.py:4480: in should_retry_this_error
    raise error  # then raise error
litellm/router.py:4262: in async_function_with_retries
    response = await self.make_call(original_function, *args, **kwargs)
litellm/router.py:4380: in make_call
    response = await response
litellm/router.py:1635: in _acompletion
    raise e
litellm/router.py:1578: in _acompletion
    response = await _response
litellm/utils.py:1604: in wrapper_async
    raise e
litellm/utils.py:1455: in wrapper_async
    result = await original_function(*args, **kwargs)
litellm/main.py:576: in acompletion
    raise exception_type(
litellm/litellm_core_utils/exception_mapping_utils.py:2309: in exception_type
    raise e
litellm/litellm_core_utils/exception_mapping_utils.py:456: in exception_type
    raise AuthenticationError(
E   litellm.exceptions.AuthenticationError: litellm.AuthenticationError: AuthenticationError: OpenAIException - Incorrect API key provided: sk-test. You can find your API key at https://platform.openai.com/account/api-keys.. Received Model Group=a
E   Available Model Group Fallbacks=None</failure></testcase><testcase classname="tests.smoke_optional.test_router_streaming_smoke" name="test_router_streaming_smoke[legacy]" time="0.004" /><testcase classname="tests.smoke_optional.test_router_streaming_smoke" name="test_router_streaming_smoke[extracted]" time="0.209"><failure message="assert False&#10; +  where False = isinstance(&lt;litellm.litellm_core_utils.streaming_handler.CustomStreamWrapper object at 0x79ad1b6db4d0&gt;, CustomStreamWrapper)">tests/smoke_optional/test_router_streaming_smoke.py:75: in test_router_streaming_smoke
    assert isinstance(stream, CustomStreamWrapper)
E   assert False
E    +  where False = isinstance(&lt;litellm.litellm_core_utils.streaming_handler.CustomStreamWrapper object at 0x79ad1b6db4d0&gt;, CustomStreamWrapper)</failure></testcase><testcase classname="tests.smoke_optional.test_router_teardown" name="test_router_teardown_no_errors" time="0.001" /><testcase classname="tests.smoke_optional.test_router_teardown_smoke" name="test_router_teardown_smoke" time="0.002" /><testcase classname="tests.smoke_optional.test_router_timeout_param_enforced" name="test_router_timeout_param_enforced" time="0.051" /><testcase classname="tests.smoke_optional.test_storage_hook_schema_minimal" name="test_storage_hook_schema_minimal" time="0.006" /><testcase classname="tests.smoke_optional.test_storage_hook_smoke" name="test_storage_hook_jsonl" time="0.003" /></testsuite></testsuites>