import types
from typing import List, Optional

from litellm.types.utils import ImageResponse


class GPTImageConfig:
    """
    Configuration class for OpenAI's GPT-Image-1 model.
    
    Reference: https://platform.openai.com/docs/api-reference/images/create
    
    Supported parameters for OpenAI GPT-Image-1:
    - `prompt` (required): The prompt to generate images from.
    - `background`: Allows to set transparency for the background of the generated image(s). This parameter is only supported for gpt-image-1. Must be one of transparent, opaque or auto (default value).
    - `model` (required): The model to use for image generation.
    - `moderation`: Control the content-moderation level for images generated by gpt-image-1. Must be either low for less restrictive filtering or auto (default value).
    - `n`: Number of images to generate. Defaults to 1.
    - `output_compression`: The compression level for the output image(s).This parameter is only supported for gpt-image-1 with the webp or jpeg output formats, and defaults to 100.
    - `output_format`: The format in which generated images are returned. Must be one of png, jpeg, or webp.
    - `quality`: The quality of the image that will be generated. The quality of the image that will be generated.
        - auto (default value) will automatically select the best quality for the given model.
        - high, medium and low are supported for gpt-image-1.
        - hd and standard are supported for dall-e-3.
        - standard is the only option for dall-e-2.
    - `size`: The size of the generated images. Must be one of 1024x1024, 1536x1024 (landscape), 1024x1536 (portrait), or auto (default value) for gpt-image-1, one of 256x256, 512x512, or 1024x1024 for dall-e-2, and one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3.
    - `user`: A unique identifier representing your end-user.
    """
    
    @classmethod
    def get_config(cls):
        return {
            k: v
            for k, v in cls.__dict__.items()
            if not k.startswith("__")
            and not isinstance(
                v,
                (
                    types.FunctionType,
                    types.BuiltinFunctionType,
                    classmethod,
                    staticmethod,
                ),
            )
            and v is not None
        }

    @classmethod
    def get_supported_openai_params(cls, model: Optional[str] = None) -> List:
        """
        Returns the list of OpenAI parameters supported by the model.
        """
        return ["background", "moderation", "n", "output_compression", "output_format", "quality", "size", "user"]
    
    @classmethod
    def _is_gpt_image_model(cls, model: Optional[str] = None) -> bool:
        """
        Returns True if the model is a GPT Image model
        """
        if model:
            if "gpt" in model:
                return True
        return False
    
    @classmethod
    def map_openai_params(cls, non_default_params: dict, optional_params: dict) -> dict:
        """Map openai params"""
        supported_openai_params = cls.get_supported_openai_params()  
        for param, value in non_default_params.items():  
            if param in supported_openai_params:  
                optional_params[param] = value  
        return optional_params  
    
    @classmethod
    def transform_response_dict_to_openai_response(
        cls, model_response: ImageResponse, response_dict: dict
    ) -> ImageResponse:
        """
        Transform the response dict to the OpenAI response.
        Since we're already dealing with OpenAI/Azure providers, minimal transformation is needed.
        """
        # The response structure should already be compatible with OpenAI format
        return model_response